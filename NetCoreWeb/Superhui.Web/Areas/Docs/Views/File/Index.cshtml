@model String
<div>
  <textarea style="display:none" id="mark-content">@Model</textarea>
</div>

@section Catalog{
  @await Component.InvokeAsync("Catalog", ViewBag.AllCatalogue)
}

@section Menu {
  @foreach (var item in (ViewBag.JCategory as JObject)["children"] as JArray) {
    @if(item["children"] != null && @item["name"].ToString().ToLower() != "images") {
      <a class="nav-item nav-link"
        href="javascript:void(0);" path=@item["path"] onclick='getSubMenu(this);'>@item["name"]</a>
    }
  }
}

@*@section Menu {
  @foreach (var item in (ViewBag.JCategory as JObject)["children"] as JArray) {
    @if(item["children"] != null) {
      <a class="p-2 text-muted"
        href="javascript:void(0);" path=@item["path"] onclick='getSubMenu(this);'>@item["name"]</a>
    }
  }
}*@

@section Links{
  <link rel="stylesheet" href="~/css/mark.css" />
  <link rel="stylesheet" href="~/lib/node_modules/github-markdown-css/github-markdown.css" />
  <style type="text/css">
    .treeDiv {
      color: #636363;
      font-weight: normal;
      background-color: #fff;
      color: black;
      overflow: auto;
      overflow-x: hidden;
    }
    .treeNode {
      padding-left: 16px;
      position: relative;
      overflow: hidden;
      text-overflow: ellipsis; 
      white-space: nowrap;
    }
    a.treeUnselected:hover, a.treeSelected:hover {
      background-color: #BFD9ED;
      text-decoration: none;
    }
    a.treeUnselected, a.treeSelected {
      text-decoration: none;
    }
    a.treeSelected {
      background-color: #B9E0F7;
    }
    a.treeUnselected {
      background-color: transparent;
    }
    .treeSubnodes {
      display: block;
    }
    .treeSubnodesHidden {
      display: none;
    }
    // .treeNode img.treeNoLinkImage, .treeNode img.treeLinkImage {
    //   height: 15px;
    //   margin-left: 5px;
    //   margin-right: 0px;
    //   width: 15px;
    // }
    // .treeNode img.treeLinkImage {
    //   cursor: pointer;
    // }
    div.treeNode a {
      // margin-left: 16px;
      text-indent: 0;
    }
    div.treeNode span.category {
      cursor: pointer;
    }
    span.category {
      color: #007bff
    }
    // .ellipsis {
    //   overflow: hidden;
    //   text-overflow: ellipsis; 
    //   white-space: nowrap;
    // }
    .cursor {
      position: absolute;
      left: 0;
    }
  </style>
}

@section Scripts{

  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <!-- <script src="~/js/area-select.js" asp-append-version="true"></script>
  <script src="~/common/js/jquery.ydui.flexible.min.js" asp-append-version="true"></script>
  <script src="~/common/js/jquery.ydui.min.js" asp-append-version="true"></script>
  <script src="~/common/js/jquery.fullpage.min.js" asp-append-version="true"></script>
  <script src="~/common/js/common.js" asp-append-version="true"></script> -->
  <script>
    var treeSelected = null;//选中的树节点
    // var imgPlus = new Image();
    // imgPlus.src="../graphics/treenodeplus.gif";
    // var imgMinus = new Image();
    // imgMinus.src="../graphics/treenodeminus.gif";

    function expandCollapse(el)
    {
        //如果父节点有字节点（class 属性为treeSubnodesHidden），展开所有子节点
        if (el.className!= "treeNode"){
            return;    //判断父节点是否为一个树节点，如果树节点不能展开，请检查是否节点的class属性是否为treeNode
        }    
        var child;
        // var imgEl;//图片子节点，在树展开时更换图片
        for(var i=0; i < el.childNodes.length; i++)
        {
            child = el.childNodes[i];
            if (child.src)
            {
                // imgEl = child;
            }
            else if (child.className == "treeSubnodesHidden")
            {
                child.className = "treeSubnodes";//原来若隐藏，则展开
                // imgEl.src = imgMinus.src;//更换图片
                break;
            }
            else if (child.className == "treeSubnodes")
            {
                child.className = "treeSubnodesHidden";//原来若展开，则隐藏
                // imgEl.src = imgPlus.src;//更换图片
                break;
            }
        }
    }

    //子节点点击事件，设置选中节点的样式
    function clickAnchor(el) {
        selectNode(el.parentNode);
        el.blur();
    }

    function selectNode(el) {
      if (treeSelected != null) {
        setSubNodeClass(treeSelected, 'A', 'treeUnselected');
      }
      setSubNodeClass(el, 'A', 'treeSelected');
      treeSelected = el;
    }

    function setSubNodeClass(el, nodeName, className) {
      var child;
      for (var i=0; i < el.childNodes.length; i++)
      {
          child = el.childNodes[i];
          if (child.nodeName == nodeName)
          {
              child.className = className;
              break;
          }
      }
    }
  </script>
  <script>
    $(document).ready(function(){
      document.getElementById('blog-content').innerHTML =
      marked($("#mark-content").val());
      if(window.history && window.history.pushState) {
        $(window).on('popstate', function(obj) {
          //console.log('pop', obj.currentTarget);
          //console.log(document.location.pathname)
          fetchRequest("/api/file/content" + document.location.pathname.replace("/docs", ""));
        });
      }
    });

    @*<!-- xhr -->
    var xhr = new XMLHttpRequest();
    xhr.open('GET', "/api/file/fileInfo/note/racs");
    xhr.responseType = 'json';
    xhr.onload = function() {
      console.log(xhr.response);
    };
    xhr.onerror = function() {
      console.log("Oops, error");
    };
    xhr.send(); *@

    @*<!-- fetch -->
    fetch("/api/file/fileInfo/note/racs").then(function(response) {
      return response.json();
    }).then(function(data) {
      console.log(data);
      for(const blink of data.children) {
        console.log(blink)
        $("#catalog").append(`<li><a href="/docs${blink.path}">${blink.name}</a></li>`);
      }
    }).catch(function(e) {
      console.log("Oops, error");
    });*@

    function getDoc (e) {
      const path = $(e).attr('path')
      console.log('path', path)
      // const newUrl = `${window.location.protocol}\/\/${document.domain}/docs${path}`;
      const newUrl = `${window.location.origin}/docs${path}`;
      window.history.pushState({}, '', newUrl);
      fetchRequest("/api/file/content" + path);
      // fetch("/api/file/content" + path).then(function(response) {
      //   return response.text();
      // }).then(function(data) {
      //   document.getElementById('blog-content').innerHTML = marked(data);
      // }).catch(function(e) {
      //   console.log("fetch blog content error!");
      // });
    }

    function fetchRequest(url) {
      fetch(url).then(function(response) {
        return response.text();
      }).then(function(data) {
        document.getElementById('blog-content').innerHTML = marked(data);
      }).catch(function(e) {
        console.log("fetch blog content error!");
      });
    }
  </script>
  <script>
      function getSubMenu (e) {
      const path = $(e).attr('path')
      console.log(window.location.origin)
      // const newUrl = `${window.location.protocol}\/\/${document.domain}/docs${path}/index.md`;
      const newUrl = `${window.location.origin}/docs${path}/index.md`;
      console.log(newUrl)
      window.location.href=newUrl;
    }
  </script>
}

